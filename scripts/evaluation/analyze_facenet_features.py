#!/usr/bin/env python3
"""
Analyze the FaceNet feature files to check for zero vectors.
This script analyzes the NPZ files generated by FaceNet extraction
to count how many frames have zero vectors (no face detected).
"""

import os
import sys
import numpy as np
import argparse
from tqdm import tqdm
import matplotlib.pyplot as plt

def analyze_file(file_path):
    """Analyze a single NPZ file for zero vectors."""
    try:
        data = np.load(file_path, allow_pickle=True)
        video_features = data['video_features']
        
        # Count frames where all elements are zero
        zero_frames = np.sum(np.all(video_features == 0, axis=1))
        total_frames = video_features.shape[0]
        zero_percent = (zero_frames / total_frames) * 100 if total_frames > 0 else 0
        
        # Calculate non-zero statistics
        non_zero_features = video_features[~np.all(video_features == 0, axis=1)]
        if len(non_zero_features) > 0:
            mean_value = np.mean(non_zero_features)
            std_value = np.std(non_zero_features)
            min_value = np.min(non_zero_features)
            max_value = np.max(non_zero_features)
        else:
            mean_value = std_value = min_value = max_value = 0
        
        return {
            'file': os.path.basename(file_path),
            'total_frames': total_frames,
            'zero_frames': zero_frames,
            'zero_percent': zero_percent,
            'mean': mean_value,
            'std': std_value,
            'min': min_value,
            'max': max_value
        }
    except Exception as e:
        print(f"Error analyzing {file_path}: {str(e)}")
        return None

def analyze_directory(directory, dataset_name="Unknown"):
    """Analyze all NPZ files in a directory."""
    if not os.path.exists(directory):
        print(f"Directory {directory} does not exist.")
        return []
    
    # Find all NPZ files (recursively if needed)
    npz_files = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith('.npz'):
                npz_files.append(os.path.join(root, file))
    
    if not npz_files:
        print(f"No NPZ files found in {directory}")
        return []
    
    print(f"Analyzing {len(npz_files)} files in {directory}...")
    
    # Analyze each file
    results = []
    for file_path in tqdm(npz_files, desc=f"Analyzing {dataset_name} features"):
        result = analyze_file(file_path)
        if result:
            results.append(result)
    
    # Print summary
    total_frames = sum(result['total_frames'] for result in results)
    total_zero_frames = sum(result['zero_frames'] for result in results)
    total_zero_percent = (total_zero_frames / total_frames) * 100 if total_frames > 0 else 0
    
    print(f"\n{dataset_name} Summary:")
    print(f"Total files analyzed: {len(results)}")
    print(f"Total frames: {total_frames}")
    print(f"Zero frames: {total_zero_frames} ({total_zero_percent:.2f}%)")
    print(f"Non-zero frames: {total_frames - total_zero_frames} ({100 - total_zero_percent:.2f}%)")
    
    # Store results in a more accessible format
    summary = {
        'dataset': dataset_name,
        'total_files': len(results),
        'total_frames': total_frames,
        'zero_frames': total_zero_frames,
        'zero_percent': total_zero_percent,
        'file_results': results
    }
    
    return summary

def plot_zero_frame_distribution(results, output_dir='.'):
    """Plot histogram of zero frame percentages."""
    if not results or 'file_results' not in results:
        return
    
    zero_percents = [result['zero_percent'] for result in results['file_results']]
    
    plt.figure(figsize=(10, 6))
    plt.hist(zero_percents, bins=20, alpha=0.7, color='skyblue', edgecolor='black')
    plt.title(f"Distribution of Zero Frames in {results['dataset']} Dataset")
    plt.xlabel("Percentage of Zero Frames")
    plt.ylabel("Number of Files")
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    
    # Save the plot
    os.makedirs(output_dir, exist_ok=True)
    plot_path = os.path.join(output_dir, f"{results['dataset']}_zero_frames_distribution.png")
    plt.savefig(plot_path)
    print(f"Plot saved to: {plot_path}")
    
    return plot_path

def identify_problem_files(results, threshold=10.0):
    """Identify files with high percentage of zero frames."""
    if not results or 'file_results' not in results:
        return
    
    problem_files = [r for r in results['file_results'] if r['zero_percent'] > threshold]
    if problem_files:
        print(f"\nFiles with more than {threshold}% zero frames in {results['dataset']}:")
        for file in problem_files:
            print(f"  {file['file']}: {file['zero_percent']:.2f}% zero frames ({file['zero_frames']}/{file['total_frames']})")
    else:
        print(f"\nNo files found with more than {threshold}% zero frames in {results['dataset']}.")

def save_detailed_results(results, output_dir='.'):
    """Save detailed analysis results to a CSV file."""
    if not results or 'file_results' not in results:
        return
    
    import pandas as pd
    
    # Create dataframe from results
    df = pd.DataFrame(results['file_results'])
    
    # Save to CSV
    os.makedirs(output_dir, exist_ok=True)
    csv_path = os.path.join(output_dir, f"{results['dataset']}_facenet_analysis.csv")
    df.to_csv(csv_path, index=False)
    print(f"Detailed results saved to: {csv_path}")
    
    return csv_path

def main():
    parser = argparse.ArgumentParser(description="Analyze FaceNet feature files for zero vectors")
    parser.add_argument("--ravdess-dir", default="ravdess_features_facenet", 
                      help="Directory containing RAVDESS FaceNet features")
    parser.add_argument("--crema-d-dir", default="crema_d_features_facenet", 
                      help="Directory containing CREMA-D FaceNet features")
    parser.add_argument("--output-dir", default="analysis_output",
                      help="Directory to save analysis results")
    parser.add_argument("--threshold", type=float, default=10.0,
                      help="Threshold percentage to identify problem files")
    parser.add_argument("--ravdess-only", action="store_true",
                      help="Analyze only RAVDESS dataset")
    parser.add_argument("--crema-d-only", action="store_true",
                      help="Analyze only CREMA-D dataset")
    
    args = parser.parse_args()
    
    # Create output directory
    os.makedirs(args.output_dir, exist_ok=True)
    
    # Analyze datasets based on arguments
    ravdess_results = None
    crema_d_results = None
    
    if args.ravdess_only:
        ravdess_results = analyze_directory(args.ravdess_dir, "RAVDESS")
        if ravdess_results:
            plot_zero_frame_distribution(ravdess_results, args.output_dir)
            identify_problem_files(ravdess_results, args.threshold)
            save_detailed_results(ravdess_results, args.output_dir)
    elif args.crema_d_only:
        crema_d_results = analyze_directory(args.crema_d_dir, "CREMA-D")
        if crema_d_results:
            plot_zero_frame_distribution(crema_d_results, args.output_dir)
            identify_problem_files(crema_d_results, args.threshold)
            save_detailed_results(crema_d_results, args.output_dir)
    else:
        # Analyze both datasets
        ravdess_results = analyze_directory(args.ravdess_dir, "RAVDESS")
        if ravdess_results:
            plot_zero_frame_distribution(ravdess_results, args.output_dir)
            identify_problem_files(ravdess_results, args.threshold)
            save_detailed_results(ravdess_results, args.output_dir)
        
        crema_d_results = analyze_directory(args.crema_d_dir, "CREMA-D")
        if crema_d_results:
            plot_zero_frame_distribution(crema_d_results, args.output_dir)
            identify_problem_files(crema_d_results, args.threshold)
            save_detailed_results(crema_d_results, args.output_dir)
        
        # Compare combined results
        if ravdess_results and crema_d_results:
            print("\nCombined Results:")
            print(f"RAVDESS: {ravdess_results['zero_percent']:.2f}% zero frames")
            print(f"CREMA-D: {crema_d_results['zero_percent']:.2f}% zero frames")
            
            # Plot combined comparison
            datasets = ['RAVDESS', 'CREMA-D']
            zero_percentages = [ravdess_results['zero_percent'], crema_d_results['zero_percent']]
            
            plt.figure(figsize=(8, 6))
            plt.bar(datasets, zero_percentages, color=['skyblue', 'salmon'])
            plt.title("Zero Frames Comparison Between Datasets")
            plt.ylabel("Percentage of Zero Frames")
            plt.grid(True, linestyle='--', alpha=0.7, axis='y')
            plt.tight_layout()
            
            # Save the plot
            plot_path = os.path.join(args.output_dir, "dataset_comparison.png")
            plt.savefig(plot_path)
            print(f"Comparison plot saved to: {plot_path}")

if __name__ == "__main__":
    main()
